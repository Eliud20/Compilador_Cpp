#include "widget.h"
#include "ui_widget.h"
#include <iostream>
#include <QFile>
#include <QFileDialog>
#include <QMessageBox>

using namespace std;

Widget::Widget(QWidget *parent)
    : QWidget(parent)
    , ui(new Ui::Widget)
{
    ui->setupUi(this);
}

Widget::~Widget()
{
    delete ui;
}


/* Analizador Spes
 * Julio Eliud Ayala Reyes
 * Numero de control: 18041250
*/



                       //L, l, d, E, e, .,  ,,    ;,   ‘,  “,  #,  |,  >,  <,  =, +,  -,  *,  /,  %,  _, &,   (,   ),   [,  ],   !,  \t,   \b,  \n,   ≠   $
int esta[35][32] ={/*0*/{2, 1, 3, 2, 1, 25, 29,   30 , 15, 17, 19, 14, 11, 10, 9, 21, 23, 20, 24, 22, 2, 13,  31, 32,   33, 34,  12, 0,  0, 0, 506,  200},
                        {2, 1, 2, 100, 1, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 2, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
                        {2, 2, 2, 101, 2, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 2, 101, 101, 101, 101,101, 101, 101, 101, 101, 101, 101},
                        {102, 102, 3, 102, 102, 25, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
                        {500, 500, 5, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500},
                        {103,103, 5, 6, 6, 130, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
                        {501, 501, 8, 501 ,501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 7, 7, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501},
                        {502, 502, 8, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502},
                        {104, 104, 8, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
                        {109, 109, 109, 109, 109, 25, 109, 109, 109, 109, 109, 109, 109, 109, 110, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
                        {111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 515, 112, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
                        {113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
                        {116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
                        {503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 117, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503},
                        {504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 118, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504},
                        {16, 16, 16, 16, 16, 16, 16, 16, 505, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 505, 505, 505, 16, 517},
                        {507, 507, 507, 507, 507, 507, 507, 507, 125, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 517},
                        {17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 517},
                        {126, 126, 126, 126, 126, 126, 126, 126, 126, 17, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
                        {19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 127, 19, 127},
                        {107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 109, 107, 107, 133, 26, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
                        {105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 109, 131, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
                        {128, 128, 128, 128, 128, 510, 510, 510, 510, 510, 510, 510, 510, 510, 109, 510, 510, 510, 510, 128, 510, 510, 128, 128, 128, 128, 510, 510, 510, 510, 510, 128},
                        {106, 106, 106, 106, 106, 25, 106, 106, 106, 106, 106, 106, 106, 106, 109, 106, 132, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
                        {108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 108, 108, 27, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
                        {508, 508, 5, 508, 508, 130, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508},
                        {108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 27, 108, 108, 108, 108, 108, 108, 108, 108, 134, 134, 134, 134, 134, 134},
                /*27*/  {27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 516},
                        {101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
                        {124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
                        {123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
                        {119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
                        {120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
                        {121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
                        {122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122}


                   };


int predictiva[60][71] = {/*1000,  1001,  1002, 1003, 1004, 1005,     1006,    1007,      1008,       1009,  1010,  1011, 1012, 1013, 1014,   1015,   1016, 1017,  1018,  1019,  1020,    1021,  1022,  1023,  1024,    1025,  1026,    1027, 1028,    1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036,   1037, 1038, 1039,  1040,  1041,   1042,  1043,   1044,  1045,  1046,  1047,  1048,  1049,  1050,  1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062  1063  1064         1065         1066      1067     1068  1069 1070
                     library class   def   as     ,     ;     endclass, public,    private, protected,  id,    [,    ],    (,     ),  ctentera,  ..,  int,  float,  char,  string,  bool,  void,  main,  endmain, func, endfunc, local, endlocal, =,    +=,   -=,   *=,   /=,   %=,  read, write, return, ++,   --,   for,  endfor, while, endwhile, do,   enddo, if,  elseif,  else,  endif,  ||,    &&,   !,    +,    -,    *,     /,   %,    ==,   !=,   <,    <=,    >,   >=, ctereal, ctenotacion, cteacracter, ctestring, eval, to,    $ */
                      //Fila en matriz de producciones

                          {0, 0, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518},
                          {1, 2, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519},
                          {520, 3, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520},
                          {521, 521, 4, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 5, 521, 5, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521},
                          {522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 6, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522},
                          {523, 523, 523, 8, 7, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523, 523},
                          {524, 524, 524, 524, 524, 524, 524, 9, 10, 11, 12, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524},
                          {525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 13, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525},
                          {526, 526, 526, 15, 15, 526, 526, 526, 526, 526, 526, 14, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526, 526},
                          {527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 16, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527},
                          {528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 17, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528, 528},
                          {529, 529, 529, 529, 18, 529, 529, 529, 529, 529, 529, 529, 19, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529, 529},
                          {530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 20, 21, 22, 23, 24, 25, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530, 530},
                          {531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 26, 531, 26, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531, 531},
                          {532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 28, 532, 27, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532, 532},
                          {533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 29, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533, 533},
                          {534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 30, 534, 534, 534, 31, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534, 534},
                          {535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 32, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535, 535},
                          {536, 536, 536, 34, 33, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536, 536},
                          {537, 537, 537, 537, 537, 36, 537, 537, 537, 537, 36, 537, 537, 36, 537, 36, 537, 537, 537, 537, 537, 537, 537, 537, 36, 537, 36, 35, 537, 537, 537, 537, 537, 537, 537, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 537, 36, 36, 36, 36, 537, 537, 36, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 537, 36, 36, 36, 36, 36, 537, 537},
                          {538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 37, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 38, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538, 538},
                          {539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 39, 539, 539, 44, 539, 44, 539, 539, 539, 539, 539, 539, 539, 539, 48, 539, 48, 539, 539, 539, 539, 539, 539, 539, 539, 46, 47, 45, 44, 44, 42, 48, 41, 48, 43, 539, 40, 48, 48, 48, 539, 539, 44, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 539, 44, 44, 44, 44, 48, 539, 539},
                          {540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 49, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540, 540},
                          {541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 50, 51, 52, 53, 54, 55, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541, 541},
                          {542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 56, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542, 542},
                          {543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 57, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 58, 58, 58, 58, 58, 58, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543, 543},
                          {544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 59, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544, 544},
                          {545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 60, 545, 545, 60, 545, 60, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 60, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 545, 60, 60, 60, 60, 545, 545, 545},
                          {546, 546, 546, 546, 61, 546, 546, 546, 546, 546, 546, 546, 62, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546, 546},
                          {547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 63, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547, 547},
                          {548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 64, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548, 548},
                          {549, 549, 549, 549, 65, 549, 549, 549, 549, 549, 549, 549, 549, 549, 66, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549, 549},
                          {550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 67, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550, 550},
                          {551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 68, 551, 551, 68, 551, 68, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 68, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 551, 68, 68, 68, 68, 551, 551, 551},
                          {552, 552, 552, 552, 69, 552, 552, 552, 552, 552, 552, 552, 552, 552, 70, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552, 552},
                          {553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 71, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553, 553},
                          {554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 74, 554, 74, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 72, 73, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 74, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 554, 74, 74, 74, 74, 554, 554, 554},
                          {555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 75, 76, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555, 555},
                          {556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 77, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556},
                          {557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 78, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557, 557},
                          {558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 79, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558, 558},
                          {559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 80, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559, 559},
                          {560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 81, 82, 82, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560, 560},
                          {561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 83, 84, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561, 561},
                          {562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 85, 562, 562, 85, 562, 85, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 562, 85, 85, 85, 85, 562, 562, 562},
                          {563, 563, 563, 563, 87, 87, 563, 563, 563, 563, 563, 563, 87, 563, 87, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 87, 87, 563, 563, 563, 563, 87, 563, 563, 563, 563, 563, 86, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 563, 87, 563},
                          {564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 88, 564, 564, 88, 564, 88, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 88, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 564, 88, 88, 88, 88, 564, 564, 564},
                          {565, 565, 565, 565, 90, 90, 565, 565, 565, 565, 565, 565, 90, 565, 90, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 90, 90, 565, 565, 565, 565, 90, 565, 565, 565, 565, 565, 90, 89, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 90, 565},
                          {566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 92, 566, 566, 92, 566, 92, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 91, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 566, 92, 92, 92, 92, 566, 566, 566},
                          {567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 93, 567, 567, 93, 567, 93, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 567, 93, 93, 93, 93, 567, 567, 567},
                          {568, 568, 568, 568, 95, 95, 568, 568, 568, 568, 568, 568, 95, 568, 95, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 568, 95, 95, 568, 568, 568, 568, 95, 568, 568, 568, 568, 568, 95, 95, 568, 568, 568, 568, 568, 568, 94, 94, 94, 94, 94, 94, 568, 568, 568, 568, 568, 95, 568},
                          {569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 96, 569, 569, 96, 569, 96, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 569, 96, 96, 96, 96, 569, 569, 569},
                          {570, 570, 570, 570, 99, 99, 570, 570, 570, 570, 570, 570, 99, 570, 99, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 570, 99, 99, 570, 570, 570, 570, 99, 570, 570, 570, 570, 570, 99, 99, 570, 97, 98, 570, 570, 570, 99, 99, 99, 99, 99, 99, 570, 570, 570, 570, 570, 99, 570},
                          {571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 571, 100, 101, 102, 103, 104, 105, 571, 571, 571, 571, 571, 571, 571},
                          {572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 106, 572, 572, 106, 572, 106, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 572, 106, 106, 106, 106, 572, 572, 572},
                          {573, 573, 573, 573, 110, 110, 573, 573, 573, 573, 573, 573, 110, 573, 110, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 573, 110, 110, 573, 573, 573, 573, 110, 573, 573, 573, 573, 573, 110, 110, 573, 110, 110, 107, 108, 109, 110, 110, 110, 110, 110, 110, 573, 573, 573, 573, 573, 110, 573},
                          {574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 111, 574, 574, 117, 574, 112, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574, 574,574, 113, 114, 115, 116, 574, 574, 574},
                          {575, 575, 575, 575, 119, 119, 575, 575, 575, 575, 575, 575, 119, 118, 119, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 575, 119, 119, 575, 575, 575, 575, 119, 575, 575, 575, 575, 575, 119, 119, 575, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 575, 575, 575, 575, 575, 119, 575},
                          {576, 576, 576, 576, 121, 121, 576, 576, 576, 576, 120, 576, 121, 576, 121, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 576, 121, 121, 576, 576, 576, 576, 121, 576, 576, 576, 576, 576, 121, 121, 576, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 576, 576, 576, 576, 576, 121, 576},
                          {577, 577, 577, 577, 122, 123, 577, 577, 577, 577, 577, 577, 123, 577, 123, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 577, 123, 123, 577, 577, 577, 577, 123, 577, 577, 577, 577, 577, 123, 123, 577, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 577, 577, 577, 577, 577, 123, 577}

                         };


int producciones[124][11] = { //Filas de matriz predictiva

                              {1, 2},
                              {1000, 1010, 1005, 1 },
                              {-1},
                              {1001, 1010, 1005, 3, 13, 1006} ,
                              {1002, 6, 4, 1003, 12, 1005, 3},
                              {-1},
                              {7, 5},
                              {1004, 4},
                              {-1},
                              {1007},
                              {1008},
                              {1009},
                              {-1},
                              {1010, 8},
                              {9},
                              {-1},
                              {1011, 10, 1012},
                              {1015, 1016, 1015, 11},
                              {1004, 10},
                              {-1},
                              {1017},
                              {1018},
                              {1019},
                              {1020},
                              {1021},
                              {1022},
                              {14, 15},
                              {1025, 1010, 1003, 12, 1013, 16, 1014, 19, 21, 1026, 14},
                              {-1},
                              {1023, 1013, 16, 1014, 19, 21, 1024},
                              {17, 1003, 12, 1005},
                              {-1},
                              {7, 18},
                              {1004, 18},
                              {-1},
                              {1027, 20, 1028},
                              {-1},
                              {4, 1003, 12, 1005, 20},
                              {-1},
                              {22, 1005, 21},
                              {41, 1005, 21},
                              {39, 1005, 21},
                              {38, 1005, 21},
                              {40, 1005, 21},
                              {36, 1005, 21},
                              {35, 1005, 21},
                              {29, 1005, 21},
                              {32, 1005, 21},
                              {-1},
                              {24, 23, 44},
                              {1029},
                              {1030},
                              {1031},
                              {1032},
                              {1033},
                              {1034},
                              {1010, 25},
                              {26},
                              {-1},
                              {1011, 27, 1012},
                              {44, 28},
                              {1004, 27},
                              {-1},
                              {1035, 1013, 30, 1014},
                              {1010, 31},
                              {1004, 30},
                              {-1},
                              {1036, 1013, 33, 1014},
                              {44, 34},
                              {1004, 33},
                              {-1},
                              {1037, 44},
                              {1038, 44},
                              {1039, 44},
                              {44, 37},
                              {1038},
                              {1039},
                              {1040, 1010, 1029, 44, 1069, 44, 1044, 21, 1041},
                              {1042, 1013, 44, 1014, 21, 1043},
                              {1044, 21, 1068, 1013, 44, 1014, 1045},
                              {1046, 1013, 44, 1014, 21, 42, 43, 1049} ,
                              {1047, 1013, 44, 1014, 21, 42},
                              {-1},
                              {1048, 21},
                              {-1},
                              {46, 45},
                              {1050, 44},
                              {-1},
                              {48, 47},
                              {1051, 46},
                              {-1},
                              {1052, 49},
                              {49},
                              {51, 50},
                              {53, 51},
                              {-1},
                              {54, 52},
                              {1053, 51},
                              {1054, 51},
                              {-1},
                              {1058},
                              {1059},
                              {1060},
                              {1061},
                              {1062},
                              {1063},
                              {56, 55},
                              {1055, 54},
                              {1056, 54},
                              {1057, 54},
                              {-1},
                              {1010, 57},
                              {1015},
                              {1064},
                              {1065},
                              {1066},
                              {1067},
                              {1013, 44, 1014},
                              {1013, 58, 1014},
                              {-1},
                              {1010, 59},
                              {-1},
                              {1004, 58},
                              {-1},


                            };

string res[] = { "class", "endclass", "int", "float", "char", "string", "bool", "if", "else", "elseif",
                  "endif", "do", "eval", "enddo", "while", "endwhile", "read", "write", "def", "as",
                  "for", "endfor", "private", "public", "protected", "library", "func",
                  "endfunc", "main", "endmain", "true", "false", "to", "void", "local", "endlocal", "return"};



int relaciona(char c){
    if (c >= 'A' && c <= 'Z' && c != 'E'){
        return 0;
    }

    else if (c >= 'a' && c <= 'z' && c != 'e'){
        return 1;
    }

    else if (c >= '0' && c <= '9'){
        return 2;
    }

    switch(c){
        case 'E': return 3;
        case 'e': return 4;
        case '.': return 5;
        case ',': return 6;
        case ';': return 7;
        case 39:   return 8;
        case '"': return 9;
        case '#': return 10;
        case '|': return 11;
        case '>': return 12;
        case '<': return 13;
        case '=': return 14;
        case '+': return 15;
        case '-': return 16;
        case '*': return 17;
        case '/': return 18;
        case '%': return 19;
        case '_': return 20;
        case '&': return 21;
        case '(': return 22;
        case ')': return 23;
        case '[': return 24;
        case ']': return 25;
        case '!': return 26;
        case '\t': return 27;
        case ' ': return 28;
        case '\n': return 29;
        case '$': return 31;
        default: return 30;
    }

}

string sacax(int x){

    switch(x) {

    case 1000:
        return "library";
        break;

    case 1001:
        return "class";
        break;

    case 1002:
        return "def";
        break;

    case 1003:
        return "as";
        break;

    case 1004:
        return ",";
        break;

    case 1005:
        return ";";
        break;

    case 1006:
        return "endclass";
        break;

    case 1007:
        return "public";
        break;

    case 1008:
        return "private";
        break;

    case 1009:
        return "protected";
        break;

    case 1010:
        return "id";
        break;

    case 1011:
        return "[";
        break;

    case 1012:
        return "]";
        break;

    case 1013:
        return "(";
        break;

    case 1014:
        return ")";
        break;

    case 1015:
        return "cteentera";
        break;

    case 1016:
        return "..";
        break;

    case 1017:
        return "int";
        break;

    case 1018:
        return "float";
        break;

    case 1019:
        return "char";
        break;

    case 1020:
        return "string";
        break;

    case 1021:
        return "bool";
        break;

    case 1022:
        return "void";
        break;

    case 1023:
        return "main";
        break;

    case 1024:
        return "endmain";
        break;

    case 1025:
        return "func";
        break;

    case 1026:
        return "endfunc";
        break;

    case 1027:
        return "local";
        break;

    case 1028:
        return "endlocal";
        break;

    case 1029:
        return "=";
        break;

    case 1030:
        return "+=";
        break;

    case 1031:
        return "-=";
        break;

    case 1032:
        return "*=";
        break;

    case 1033:
        return "/=";
        break;

    case 1034:
        return "%=";
        break;

    case 1035:
        return "read";
        break;

    case 1036:
        return "write";
        break;

    case 1037:
        return "return";
        break;

    case 1038:
        return "++";
        break;

    case 1039:
        return "--";
        break;

    case 1040:
        return "for";
        break;

    case 1041:
        return "endfor";
        break;

    case 1042:
        return "while";
        break;

    case 1043:
        return "endwhile";
        break;

    case 1044:
        return "do";
        break;

    case 1045:
        return "enddo";
        break;

    case 1046:
        return "if";
        break;

    case 1047:
        return "elseif";
        break;

    case 1048:
        return "else";
        break;

    case 1049:
        return "endif";
        break;

    case 1050:
        return "||";
        break;

    case 1051:
        return "&&";
        break;

    case 1052:
        return "!";
        break;

    case 1053:
        return "+";
        break;

    case 1054:
        return "-";
        break;

    case 1055:
        return "*";
        break;

    case 1056:
        return "/";
        break;

    case 1057:
        return "%";
        break;

    case 1058:
        return "==";
        break;

    case 1059:
        return "!=";
        break;

    case 1060:
        return "<";
        break;

    case 1061:
        return "<=";
        break;

    case 1062:
        return ">";
        break;

    case 1063:
        return ">=";
        break;

    case 1064:
        return "ctereal";
        break;

    case 1065:
        return "ctenotacion";
        break;

    case 1066:
        return "ctecaracter";
        break;

    case 1067:
        return "ctestring";
        break;

    case 1068:
        return "eval";
        break;

    case 1069:
        return "to";
        break;

    case 1070:
        return "$";
        break;

    default: return 0;
    }

}

int produ(int a){

    switch(a) {

    case 1000:
        return 0;
        break;

    case 1001:
        return 1;
        break;

    case 1002:
        return 2;
        break;

    case 1003:
        return 3;
        break;

    case 1004:
        return 4;
        break;

    case 1005:
        return 5;
        break;

    case 1006:
        return 6;
        break;

    case 1007:
        return 7;
        break;

    case 1008:
        return 8;
        break;

    case 1009:
        return 9;
        break;

    case 1010:
        return 10;
        break;

    case 1011:
        return 11;
        break;

    case 1012:
        return 12;
        break;

    case 1013:
        return 13;
        break;

    case 1014:
        return 14;
        break;

    case 1015:
        return 15;
        break;

    case 1016:
        return 16;
        break;

    case 1017:
        return 17;
        break;

    case 1018:
        return 18;
        break;

    case 1019:
        return 19;
        break;

    case 1020:
        return 20;
        break;

    case 1021:
        return 21;
        break;

    case 1022:
        return 22;
        break;

    case 1023:
        return 23;
        break;

    case 1024:
        return 24;
        break;

    case 1025:
        return 25;
        break;

    case 1026:
        return 26;
        break;

    case 1027:
        return 27;
        break;

    case 1028:
        return 28;
        break;

    case 1029:
        return 29;
        break;

    case 1030:
        return 30;
        break;

    case 1031:
        return 31;
        break;

    case 1032:
        return 32;
        break;

    case 1033:
        return 33;
        break;

    case 1034:
        return 34;
        break;

    case 1035:
        return 35;
        break;

    case 1036:
        return 36;
        break;

    case 1037:
        return 37;
        break;

    case 1038:
        return 38;
        break;

    case 1039:
        return 39;
        break;

    case 1040:
        return 40;
        break;

    case 1041:
        return 41;
        break;

    case 1042:
        return 42;
        break;

    case 1043:
        return 43;
        break;

    case 1044:
        return 44;
        break;

    case 1045:
        return 45;
        break;

    case 1046:
        return 46;
        break;

    case 1047:
        return 47;
        break;

    case 1048:
        return 48;
        break;

    case 1049:
        return 49;
        break;

    case 1050:
        return 50;
        break;

    case 1051:
        return 51;
        break;

    case 1052:
        return 52;
        break;

    case 1053:
        return 53;
        break;

    case 1054:
        return 54;
        break;

    case 1055:
        return 55;
        break;

    case 1056:
        return 56;
        break;

    case 1057:
        return 57;
        break;

    case 1058:
        return 58;
        break;

    case 1059:
        return 59;
        break;

    case 1060:
        return 60;
        break;

    case 1061:
        return 61;
        break;

    case 1062:
        return 62;
        break;

    case 1063:
        return 63;
        break;

    case 1064:
        return 64;
        break;

    case 1065:
        return 65;
        break;

    case 1066:
        return 66;
        break;

    case 1067:
        return 67;
        break;

    case 1068:
        return 68;
        break;

    case 1069:
        return 69;
        break;

    case 1070:
        return 70;
        break;

    default: return 3000;
    }

}

int saca_columna(string c, int edo){

    if(c == "library" && edo == 100){
        return 1000;

    } else if (c == "class"){
        return 1001;

    } else if (c == "def"){
        return 1002;

    } else if (c == "as"){
        return 1003;
    } else if (c == ","){
        return 1004;
    } else if (c == ";"){
        return 1005;
    } else if (c == "endclass"){
        return 1006;
    } else if (c == "public"){
        return 1007;
    } else if (c == "private"){
        return 1008;
    } else if (c == "protected"){
        return 1009;

    } else if (edo == 101){
        return 1010;

    } else if (c == "["){
        return 1011;

    } else if (c == "]"){
        return 1012;

    } else if (edo == 119){
        return 1013;

    } else if (edo == 120){
        return 1014;

    } else if (edo == 102){
        return 1015;
    } else if (c == ".."){
        return 1016;
    } else if (c == "int"){
        return 1017;
    }  else if (c == "float"){
        return 1018;
    } else if (c == "char"){
        return 1019;
    } else if (c == "string"){
        return 1020;
    } else if (c == "bool"){
        return 1021;
    } else if (c == "void"){
        return 1022;
    } else if (c == "main"){
        return 1023;
    } else if (c == "endmain"){
        return 1024;
    } else if (c == "func"){
        return 1025;
    } else if (c == "endfunc"){
        return 1026;
    } else if (c == "local"){
        return 1027;
    } else if (c == "endlocal"){
        return 1028;
    } else if (c == "="){
        return 1029;
    } else if (c == "+=" && edo == 109){
        return 1030;
    } else if (c == "-="){
        return 1031;
    }  else if (c == "*="){
        return 1032;
    } else if (c == "/="){
        return 1033;
    } else if (c == "%="){
        return 1034;
    } else if (c == "read"){
        return 1035;
    } else if (c == "write"){
        return 1036;
    } else if (c == "return"){
        return 1037;
    } else if (c == "++"){
        return 1038;
    } else if (c == "--"){
        return 1039;
    } else if (c == "for"){
        return 1040;
    } else if (c == "endfor"){
        return 1041;
    } else if (c == "while"){
        return 1042;
    } else if (c == "endwhile"){
        return 1043;
    } else if (c == "do"){
        return 1044;
    } else if (c == "enddo"){
        return 1045;
    } else if (c == "if"){
        return 1046;
    } else if (c == "elseif"){
        return 1047;
    }  else if (c == "else"){
        return 1048;
    } else if (c == "endif"){
        return 1049;
    } else if (c == "||"){
        return 1050;
    } else if (c == "&&"){
        return 1051;
    } else if (c == "!"){
        return 1052;
    } else if (c == "+"){
        return 1053;
    } else if (c == "-"){
        return 1054;
    } else if (c == "*"){
        return 1055;
    } else if (c == "/"){
        return 1056;
    } else if (c == "%"){
        return 1057;
    } else if (c == "==" || edo == 109){
        return 1058;
    } else if (c == "!="){
        return 1059;
    } else if (c == "<"){
        return 1060;
    } else if (c == "<="){
        return 1061;
    } else if (c == ">"){
        return 1062;
    }  else if (c == ">="){
        return 1063;
    } else if (edo == 103){
        return 1064;
    } else if (edo == 104){
        return 1065;
    } else if (edo == 125){
        return 1066;
    } else if (edo == 126){
        return 1067;
    } else if (c == "eval"){
        return 1068;
    } else if (c == "to"){
        return 1069;
    } else if (c == "$" || edo == 200){
        return 1070;
    } else return 3000;

}

bool reserv (string cad){
    bool re = false;
    int cont = 0;
    string fin = cad.substr(0, cad.length() - 1);

    while(cont < 38){

        if (fin == res[cont]){
            re = true;
            break;

        }
        cont++;
    }

    return re;
}

int cont = 0;
int pila[500];


void push(int pila[], int val){

    if (cont >= 0 && cont < 200){
        pila[cont] = val;
        cont++;
        cout<<"Entro num: "<<val <<'\n';

        for(int z = 0; z <= cont; z++) {
            int k = pila[z];
            cout<<"Push pila "<<z<<": "<<k<<'\n';
        }

    } else {
        cout<<"Pila llena";
    }
}


int pop(int pila[]){
    int x = 0;

    if (cont > 0 && cont < 200) {

       cont--;
       x = pila[cont];
       pila[cont] = 0;
       cout<<"Hizo pop"<<'\n';

       for(int z = 0; z <= cont; z++) {
           int k = pila[z];
           cout<<"pila "<<z<<": "<<k<<'\n';
       }

    } else {
        cout<<"La pila esta vacia: pop"<<'\n';
    }
    return x;
}


int top(int pila[]){

    int c = 0;

    if (cont > 0 && cont < 200) {

       c = pila[cont - 1];

    } else {

        cout<<"La pila esta vacia: top"<<endl; //aquí el error

    }
    return c;
}


void Widget::ingresa_deriva(int produ[124][11], int fila, int pila[]){
    string cal = "";
    string ca;

       for (int col = 10; col >= 0; col--){

           if (produ[fila][col] == 0){

           } else {

           push(pila, produ[fila][col]);

           }
    }
}

bool band = true;

int ultima_fila;

void Widget::sintac(QString simb, int edo) {

    int x = 0, nexttok = 0;
    int col = 0;

    QString tok = simb;

    tok = tok.remove('\t', '\n');
    tok = tok.remove('\b');


    string rea = tok.toStdString();

    cout<<"Tamanio: "<<rea.size()<<'\n';

    cout<<"Token: "<<rea<<'\n';

    cout<<"cont: "<<cont<<'\n';

    do {

        x = top(pila);
        nexttok = saca_columna(rea, edo);
        col = produ(nexttok);


        cout<<"Tope: "<<x<<'\n';
        cout<<"Nexttok :"<<nexttok<<'\n';
        cout<<"Col pred: "<<col<<'\n';

        if(x < 1000) {
        cout<<"Valor mat pred: "<<predictiva[ultima_fila][col]<<'\n';
        } else {

        }

        for(int z = 0; z <= cont; z++) {
            int k = pila[z];
            cout<<"Sint pila "<<z<<": "<<k<<'\n';
        }


        if (col == 3000 || nexttok == 3000){
            break;
        }


        if (x >= 1000 && x <= 1077) {

            if (x == nexttok && nexttok == 1070){

                ui->resultados->appendPlainText("\nSintaxis: Archivo aceptado");

            } else if (x == nexttok && nexttok != 1070){

                pop(pila);

            } else if (x != nexttok){

                QString num = QString::fromStdString(sacax(x));
                cout<<"**************************ERROR**************"<<'\n';
                ui->errores->appendPlainText("Error!, Se esperaba: " + num);
                band = false;
                break;
            }

        } else if (x < 125){

            if(predictiva[x][col] >= 500){
                Error(predictiva[x][col]);
                band = false;
                break;
            }

            if (x == -1){

                pop(pila);

            } else {

            ultima_fila = pop(pila);
            cout<<"Ultima fila: "<<ultima_fila<<'\n';
            ingresa_deriva(producciones, predictiva[x][col],pila);

            }



        } else {

            Error(predictiva[x][col]);
            band = false;
            break;

        }

    } while(nexttok != x && nexttok != 1070 && pila[0] != 0);
    cout<<"Ultima fila: "<<ultima_fila<<'\n';
    cout<<"TOPE: "<<top(pila)<<'\n';
    cout<<"Termina"<<'\n';
}


void Widget::analiza () {

    int edo, col;
    string con = "";
    char car;
    int i = 0;
    edo = 0;;
    QString caden = ui->cadena->toPlainText();
    caden = caden.simplified();
    string cadena = caden.toStdString() + '$';
    int lon = cadena.length();
    ui->resultados->setEnabled(true);
    ui->errores->setEnabled(true);


    while (i <= lon && band == true){

        car = cadena[i];
        if (car == 9 || car == '\n' || car == 32){
            car = 32;
        }

        col = relaciona (car);
        edo = esta[edo][col];
        con += car;
        cout<<"car: "<<car<<" col: "<<col<<" edo: "<<edo<<" Vuelta: "<<i<<endl;
        i++;

        QString b = QString::fromStdString(con);
        b = b.remove('\b');
        con = b.toStdString();

        if (car == '$' && edo == 200){
            con = '$';
            sintac(QString::fromStdString(con), 200);
            break;
        }


    if (edo >= 100 && edo <= 135) {


        if(car != 32 && car != 10 && car != 9 && !(edo >= 130 && edo <= 133) && !(edo == 110 || edo == 112 ||
                                                         edo == 114 || edo == 115 ||
                                                         edo == 117 || edo == 118 ||
                                                         edo == 125 || edo == 130 ||
                                                         edo == 109))
        {
            i--;
            con.at(con.length() - 1) = 32;

            QString f = QString::fromStdString(con);
            f = f.remove('\b');
            con = f.toStdString();

        }

        if (edo == 100) {

            if (reserv(con) == true) {

                Token(edo,con);
                //cout<<"213 CON:"<<con<<"a"<<'\n';
                sintac(QString::fromStdString(con).simplified(), 100);
                edo = 0;
                con = "";

            } else {

                if (con.at(0) == 9 || con.at(0) == 32 || con.at(0) == 10){

                    QString f = QString::fromStdString(con);
                    f = f.simplified();
                    f = f.trimmed();
                    con = f.toStdString();


                    if (reserv(con) == true) {

                    Token(100,con);
                    //cout<<"213 CON:"<<con<<"a"<<'\n';
                    sintac(QString::fromStdString(con), 100);
                    edo = 0;
                    con = "";

                    } else {

                        Token(101,con);
                        //cout<<"213 CON:"<<con<<"a"<<'\n';
                        sintac(QString::fromStdString(con), 101);
                        edo = 0;
                        con = "";

                    }

                } else {

                    Token(101,con);
                    //cout<<"213 CON:"<<con<<"a"<<'\n';
                    sintac(QString::fromStdString(con).simplified(), 101);
                    edo = 0;
                    con = "";
                }

            }

        } else {

           Token(edo, con);
           //cout<<"213 CON:"<<con<<"a"<<'\n';
           sintac(QString::fromStdString(con).simplified(), edo);
           edo = 0;
           con = "";
        }//fin if reservadas

    } //fin if edos de aceptacion

        else if (edo >= 500 && edo <= 517) {
           Error (edo);
           break;
    }
        //cout<<"Tot: "<<con.size()<<'\n';
    }


}


void Widget::Token(int edo, string cad){

    switch(edo){

        case 0: ui->resultados->appendPlainText("Termina cadena");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Palabra Reservada"<<endl;
                  break;

        case 100: ui->resultados->appendPlainText("Token 100: ("+QString::fromStdString(cad).simplified()+", Palabra reservada)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Palabra Reservada"<<endl;
                  break;

        case 101: ui->resultados->appendPlainText("Token 101: ("+QString::fromStdString(cad).simplified()+", Identificador)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Identificador"<<endl;
                  break;

        case 102: ui->resultados->appendPlainText("Token 102: ("+QString::fromStdString(cad).simplified()+", Num Entero)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Num Entero"<<endl;
                  break;

        case 103: ui->resultados->appendPlainText("Token 103: ("+QString::fromStdString(cad).simplified()+", Num Real)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Num Real"<<endl;
                  break;
        case 104: ui->resultados->appendPlainText("Token 104: ("+QString::fromStdString(cad).simplified()+", Notacion Cient)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Notacion Cien"<<endl;
                  break;

        case 105: ui->resultados->appendPlainText("Token 105: ("+QString::fromStdString(cad).simplified()+", Suma)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Suma"<<endl;
                  break;

        case 106: ui->resultados->appendPlainText("Token 106: ("+QString::fromStdString(cad).simplified()+", Resta)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Resta"<<endl;
                  break;

        case 107: ui->resultados->appendPlainText("Token 107: ("+QString::fromStdString(cad).simplified()+", Multiplicacion)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Multiplicacion"<<endl;
                  break;

        case 108: ui->resultados->appendPlainText("Token 108: ("+QString::fromStdString(cad).simplified()+", Division)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Division"<<endl;
                  break;

        case 109: ui->resultados->appendPlainText("Token 109: ("+QString::fromStdString(cad).simplified()+", Operador asignacion)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Operador asignacion"<<endl;
                  break;

        case 110: ui->resultados->appendPlainText("Token 110: ("+QString::fromStdString(cad).simplified()+", Igual)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Igual"<<endl;
                  break;

        case 111: ui->resultados->appendPlainText("Token 111: ("+QString::fromStdString(cad).simplified()+", Menor que)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Menor"<<endl;
                  break;

        case 112: ui->resultados->appendPlainText("Token 112: ("+QString::fromStdString(cad).simplified()+", Menor o igual)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Menor o Igual"<<endl;
                  break;

        case 113: ui->resultados->appendPlainText("Token 113: ("+QString::fromStdString(cad).simplified()+", Mayor)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Mayor"<<endl;
                  break;

        case 114: ui->resultados->appendPlainText("Token 114: ("+QString::fromStdString(cad).simplified()+", Mayor o Igual)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Mayor o Igual"<<endl;
                  break;

        case 115: ui->resultados->appendPlainText("Token 115: ("+QString::fromStdString(cad).simplified()+", Diferente)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Diferente"<<endl;
                  break;

        case 116: ui->resultados->appendPlainText("Token 116: ("+QString::fromStdString(cad).simplified()+", Not)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Not"<<endl;
                  break;

        case 117: ui->resultados->appendPlainText("Token 117: ("+QString::fromStdString(cad).simplified()+", And)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: And"<<endl;
                  break;

        case 118: ui->resultados->appendPlainText("Token 118: ("+QString::fromStdString(cad).simplified()+", Or)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Or"<<endl;
                  break;

        case 119: ui->resultados->appendPlainText("Token 119: ("+QString::fromStdString(cad).simplified()+", Parentesis que abre)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Parentesis que abre"<<endl;
                  break;


        case 120: ui->resultados->appendPlainText("Token 120: ("+QString::fromStdString(cad).simplified()+", Parentesis que cierra)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Parentesis que cierra"<<endl;
                  break;

        case 121: ui->resultados->appendPlainText("Token 121: ("+QString::fromStdString(cad).simplified()+", Corchete que abre)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Corchete que abre"<<endl;
                  break;


        case 122: ui->resultados->appendPlainText("Token 122: ("+QString::fromStdString(cad).simplified()+", Corchete que cierra)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Corchete que cierra"<<endl;
                  break;

        case 123: ui->resultados->appendPlainText("Token 123: ("+QString::fromStdString(cad).simplified()+", Punto y coma)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Punto y coma"<<endl;
                  break;

        case 124: ui->resultados->appendPlainText("Token 124: ("+QString::fromStdString(cad).simplified()+", Coma)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Coma"<<endl;
                  break;

        case 125: ui->resultados->appendPlainText("Token 125: ("+QString::fromStdString(cad).simplified()+", Constante caracter)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Constante caracter"<<endl;
                  break;

        case 126: ui->resultados->appendPlainText("Token 126: ("+QString::fromStdString(cad).simplified()+", Constante String)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Constante string"<<endl;
                  break;

        case 127: ui->resultados->appendPlainText("Token 127: ("+QString::fromStdString(cad).simplified()+", Comentario de linea)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Comentario de linea"<<endl;
                  break;

        case 128: ui->resultados->appendPlainText("Token 128: ("+QString::fromStdString(cad).simplified()+", Modulo)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Modulo"<<endl;
                  break;

        case 130: ui->resultados->appendPlainText("Token 130: ("+QString::fromStdString(cad).simplified()+", Doble punto)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Doble punto"<<endl;
                  break;

        case 131: ui->resultados->appendPlainText("Token 131: ("+QString::fromStdString(cad).simplified()+", Incremento)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Incremento"<<endl;
                  break;

        case 132: ui->resultados->appendPlainText("Token 132: ("+QString::fromStdString(cad).simplified()+", Decremento)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Decremento"<<endl;
                  break;

        case 133: ui->resultados->appendPlainText("Token 133: ("+QString::fromStdString(cad).simplified()+", Exponente)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Exponente"<<endl;
                  break;

        case 134: ui->resultados->appendPlainText("Token 134: ("+QString::fromStdString(cad).simplified()+", Comentario de bloque)");
                  cout<<"Token "<<edo<<" Lexema: "<<cad<<" Gramema: Comentario de bloque"<<endl;
                  break;
    }

}

void Widget::Error(int err){
    switch(err) {

        case 500: ui->errores->appendPlainText("Error 500: Se espera un digito despues del punto");
                  cout<<"Error: "<<err<<": Se espera un digito despues del punto"<<endl;
                  break;

        case 501: ui->errores->appendPlainText("Error 501: Se espera un digito o +|- despues de E|e");
                  cout<<"Error: "<<err<<": Se espera un digito o +|- despues de E|e"<<endl;
                  break;

        case 502: ui->errores->appendPlainText("Error 502: Se espera un digito despues de +|-");
                  cout<<"Error: "<<err<<": Se espera un digito despues del +|-"<<endl;
                  break;

        case 503: ui->errores->appendPlainText("Error 503: Se espera otro Amperson(&)");
                  cout<<"Error: "<<err<<": Se espera otro Amperson(&)"<<endl;
                  break;

        case 504: ui->errores->appendPlainText("Error 504: Se espera otro Or(|)");
                  cout<<"Error: "<<err<<": Se espera otro or(|)"<<endl;
                  break;

        case 505: ui->errores->appendPlainText("Error 505: Comillas simples no van vacias");
                  cout<<"Error: "<<err<<": Comillas simples no van vacias"<<endl;
                  break;

        case 506: ui->errores->appendPlainText("Error 506: Se desconoce el simbolo analizado");
                  cout<<"Error: "<<err<<": Se desconoce el simbolo analizado"<<endl;
                  break;

        case 507: ui->errores->appendPlainText("Error 507: Solo se ingresa un caracter");
                  cout<<"Error: "<<err<<": Solo se ingresa un caracter"<<endl;
                  break;

        case 508: ui->errores->appendPlainText("Error 508: Se espera otro digito o punto");
                  cout<<"Error: "<<err<<": Se espera otro digito o punto"<<endl;
                  break;

        case 509: ui->errores->appendPlainText("Error 509: Se espera un digito despues del punto");
                  cout<<"Error: "<<err<<": Se espera un digito despues del punto"<<endl;
                  break;

        case 510: ui->errores->appendPlainText("Error 510: Se espera un digito o identificador despues de %");
                  cout<<"Error: "<<err<<": Se espera un digito o identificador despues de %"<<endl;
                  break;

        case 515: ui->errores->appendPlainText("Error 515: Se espera un simbolo diferente");
                  cout<<"Error: "<<err<<": Se espera un simbolo diferente"<<endl;
                  break;

        case 516: ui->errores->appendPlainText("Error 516: Se espera que se cierre el comentario");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 517: ui->errores->appendPlainText("Error 517: Se espera otra comilla para cerrar constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 518: ui->errores->appendPlainText("Error 518: \nError de sintaxis: Se esperaba library o class");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 519: ui->errores->appendPlainText("Error 519: \nError de sintaxis: Se esperaba library o class");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 520: ui->errores->appendPlainText("Error 520: \nError de sintaxis: Se esperaba class");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 521: ui->errores->appendPlainText("Error 521: \nError de sintaxis: Se esperaba def, main o func");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 522: ui->errores->appendPlainText("Error 522: \nError de sintaxis: Se esperaba un identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 523: ui->errores->appendPlainText("Error 523: \nError de sintaxis: Se esperaba as o ,");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 524: ui->errores->appendPlainText("Error 524: \nError de sintaxis: Se esperaba public, private, protected o identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 525: ui->errores->appendPlainText("Error 525: \nError de sintaxis: Se esperaba un identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 526: ui->errores->appendPlainText("Error 526: \nError de sintaxis: Se esperaba [, as o ,");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 527: ui->errores->appendPlainText("Error 527: \nError de sintaxis: Se esperaba [");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 528: ui->errores->appendPlainText("Error 528: \nError de sintaxis: Se esperaba cteentera");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 529: ui->errores->appendPlainText("Error 529: \nError de sintaxis: Se esperaba , o ]");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 530: ui->errores->appendPlainText("Error 530: \nError de sintaxis: Se esperaba un tipo de dato (int,float,char,string,bool,void)");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 531: ui->errores->appendPlainText("Error 531: \nError de sintaxis: Se esperaba main o func");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 532: ui->errores->appendPlainText("Error 532: \nError de sintaxis: Se esperaba main o func");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 533: ui->errores->appendPlainText("Error 533: \nError de sintaxis: Se esperaba main");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 534: ui->errores->appendPlainText("Error 534: \nError de sintaxis: Se esperaba un identificador o )");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 535: ui->errores->appendPlainText("Error 535: \nError de sintaxis: Se esperaba un identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 536: ui->errores->appendPlainText("Error 536: \nError de sintaxis: Se esperaba , o as");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 537: ui->errores->appendPlainText("Error 537: \nError de sintaxis: Se esperaba local, ;, id, constantes, estatutos, ++, -- o eval");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 538: ui->errores->appendPlainText("Error 538: \nError de sintaxis: Se esperaba se esperaba un id o endlocal");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 539: ui->errores->appendPlainText("Error 539: \nError de sintaxis: Se esperaba id, ( ,endmain, endlocal, estatutos o constantes o eval");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 540: ui->errores->appendPlainText("Error 540: \nError de sintaxis: Se esperaba un identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 541: ui->errores->appendPlainText("Error 541: \nError de sintaxis: Se esperaba operador de asignacion (=, +=, -=, *=, /=, %=)");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 542: ui->errores->appendPlainText("Error 542: \nError de sintaxis: Se esperaba un identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 543: ui->errores->appendPlainText("Error 543: \nError de sintaxis: Se esperaba [ u operador de asignacion");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 544: ui->errores->appendPlainText("Error 544: \nError de sintaxis: Se esperaba [");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 545: ui->errores->appendPlainText("Error 545: \nError de sintaxis: Se esperaba id, (, ! o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 546: ui->errores->appendPlainText("Error 546: \nError de sintaxis: Se esperaba , o ]");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 547: ui->errores->appendPlainText("Error 547: \nError de sintaxis: Se esperaba read");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 548: ui->errores->appendPlainText("Error 548: \nError de sintaxis: Se esperaba identificador");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 549: ui->errores->appendPlainText("Error 549: \nError de sintaxis: Se esperaba , o )");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 550: ui->errores->appendPlainText("Error 550: \nError de sintaxis: Se esperaba write");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 551: ui->errores->appendPlainText("Error 551: \nError de sintaxis: Se esperaba id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 552: ui->errores->appendPlainText("Error 552: \nError de sintaxis: Se esperaba , o )");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 553: ui->errores->appendPlainText("Error 553: \nError de sintaxis: Se esperaba return");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 554: ui->errores->appendPlainText("Error 554: \nError de sintaxis: Se esperaba ++,--,!,( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 555: ui->errores->appendPlainText("Error 555: \nError de sintaxis: Se esperaba ++ o --");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 556: ui->errores->appendPlainText("Error 556: \nError de sintaxis: Se esperaba for");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 557: ui->errores->appendPlainText("Error 557: \nError de sintaxis: Se esperaba while");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 558: ui->errores->appendPlainText("Error 558: \nError de sintaxis: Se esperaba do");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 559: ui->errores->appendPlainText("Error 559: \nError de sintaxis: Se esperaba if");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 560: ui->errores->appendPlainText("Error 560: \nError de sintaxis: Se esperaba elseif, else o endif");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 561: ui->errores->appendPlainText("Error 561: \nError de sintaxis: Se esperaba else o endif");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 562: ui->errores->appendPlainText("Error 562: \nError de sintaxis: Se esperaba id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 563: ui->errores->appendPlainText("Error 563: \nError de sintaxis: Se esperaba  ; , ], ), coma, ++, --, do, ||, to");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 564: ui->errores->appendPlainText("Error 564: \nError de sintaxis: Se esperaba id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 565: ui->errores->appendPlainText("Error 565: \nError de sintaxis: Se esperaba &&, ||, coma, ;, ), ], to, ++, --, do");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 566: ui->errores->appendPlainText("Error 566: \nError de sintaxis: Se esperaba !, id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 567: ui->errores->appendPlainText("Error 567: \nError de sintaxis: Se esperaba id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 568: ui->errores->appendPlainText("Error 568: \nError de sintaxis: Se esperaba operadores de relacion, to, ; ,(coma), &&, ||, ++, --");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 569: ui->errores->appendPlainText("Error 569: \nError de sintaxis: Se esperaba id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 570: ui->errores->appendPlainText("Error 570: \nError de sintaxis: Se esperaba + o -");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 571: ui->errores->appendPlainText("Error 571: \nError de sintaxis: Se esperaba constante (entera, string, carácter, real, notacion)");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 572: ui->errores->appendPlainText("Error 572: \nError de sintaxis: Se esperaba id, ( o constante");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 573: ui->errores->appendPlainText("Error 573: \nError de sintaxis: Se esperaba *, /, %, +, -, constante, to, ; ,], ), to, operadores de relacion, *, /, %, &&, ||, do o ,(coma)");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 574: ui->errores->appendPlainText("Error 574: \nError de sintaxis: Se esperaba d, constante o (");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 575: ui->errores->appendPlainText("Error 575: \nError de sintaxis: Se esperaba (, ; ,], ), to, operadores de relacion, aritmeticos &&, ||, do o ,(coma)");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 576: ui->errores->appendPlainText("Error 576: \nError de sintaxis: Se esperaba id, (, ; ,], ), to, operadores de relacion, aritmeticos &&, ||, do o ,(coma)");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;

        case 577: ui->errores->appendPlainText("Error 577: \nError de sintaxis: Se esperaba ,(coma) , (, ; ,], ), to, operadores de relacion, aritmeticos, &&, || o do");
                  cout<<"Error: "<<err<<": Se espera que se cierre el comentario"<<endl;
                  break;


    }
}


void Widget::on_analizar_clicked()
{
    push(pila, 1070);
    push(pila, 0);
    analiza();
}


void Widget::on_archivo_clicked()
{
    QString nom;
    nom = QFileDialog::getOpenFileName(this,"Abrir archivo",tr(".spes"));

    if(nom.isEmpty()){
        return;
    }

    if(!nom.isEmpty()){
          QFile arc(nom);
        if(arc.open(QFile::ReadOnly)){
            ui->cadena->setPlainText(arc.readAll());
        }
    }
}


void Widget::on_guardar_clicked()
{
    QFile arc;
    QTextStream io;
    QString nom;

    nom = QFileDialog::getSaveFileName(this,"Guardar archivo",tr(".spes"));

    if(nom.isEmpty()){
        return;
    }

    if(!nom.endsWith(".spes")){
        nom.append(".spes");
    }

    arc.setFileName(nom);
    arc.open(QIODevice::WriteOnly | QIODevice::Text);

    if(!arc.isOpen()){
        QMessageBox::critical(this,"Error",arc.errorString());
        return;
    }

    io.setDevice(&arc);
    io<<ui->cadena->toPlainText();
    arc.flush();
    arc.close();
}


void Widget::on_salir_clicked()
{
    this->close();
}


void Widget::on_limpiar_clicked()
{
    ui->cadena->clear();
    ui->resultados->clear();
    ui->errores->clear();
    band = true;
}

